/* Interface */
#define function mulDivDown(uint256,uint256,uint256) view returns (uint256)
#define function mulDivUp(uint256,uint256,uint256) view returns (uint256)


#define macro MUL_DIV_DOWN() = takes(0) returns (1) {
                       // Stack: []
    /* Perform Safe Multiplication */
    0x04 calldataload  // Stack: [ a ]
    0x24 calldataload  // Stack: [ b, a ]
    dup1               // Stack: [ b, b, a]
    iszero             // Stack: [ (b==0), b, a]
    error jumpi        // If b==0 then a*b/c == 0, revert;
                       // Stack: [ b, a ]

    dup2               // Stack: [ a, b, a ]
    dup2               // Stack: [ b, a, b, a ]
    mul                // Stack: [ (b*a), b, a ]
    swap2              // Stack: [ a, b, (b*a) ]
    dup3               // Stack: [ (b*a), a, b, (b*a) ]
    div                // Stack: [ ((b*a)/a), b, (b*a) ]
    eq                 // Stack: [ (((b*a)/a) == b), (b*a) ]
    iszero             // Stack: [ ((((b*a)/a) == b) == 0), (b*a) ]
    error jumpi
                       // Stack: [(b*a)]

    /* Equivalent to require(denominator != 0) */
    0x44 calldataload  // Stack: [denominator, (b*a)]
    dup1               // Stack: [denominator, denominator, (b*a)]
    iszero             // // Stack: [(denominator==0), denominator, (b*a)]
    error jumpi
                       // Stack: [denominator, (b*a)]
    
    swap1              // Stack: [(b*a), denominator]
    div                // Stack: [((b*a) / denominator)]

    0x00               // Stack: [0x00, ((b*a) / denominator)]
    mstore             // store in memory, memory[0x00:0x00+32] = ((b*a) / denominator)

                       // Stack: []
    0x20 0x00 return   // return value at memory location 0x20, memory[0x20:0x20+0x00]

    error:
        0x00 0x00 revert

}


#define macro MUL_DIV_UP() = takes(0) returns (1) {
                       // Stack: []
    /* Perform Safe Multiplication */
    0x04 calldataload  // Stack: [ a ]
    0x24 calldataload  // Stack: [ b, a ]
    dup1               // Stack: [ b, b, a]
    iszero             // Stack: [ (b==0), b, a]
    error jumpi        // If b==0, a*b/c == 0, revert;
                       // Stack: [ b, a ]

    dup2               // Stack: [ a, b, a ]
    dup2               // Stack: [ b, a, b, a ]
    mul                // Stack: [ (b*a), b, a ]
    swap2              // Stack: [ a, b, (b*a) ]
    dup3               // Stack: [ (b*a), a, b, (b*a) ]
    div                // Stack: [ ((b*a)/a), b, (b*a) ]
    eq                 // Stack: [ (((b*a)/a) == b), (b*a) ]
    iszero             // Stack: [ ((((b*a)/a) == b) == 0), (b*a) ]
    error jumpi
                       // Stack: [(b*a)]

    dup1               // Stack: [(b*a), (b*a)]

    /* Equivalent to require(denominator != 0) */
    0x44 calldataload  // Stack: [denominator, (b*a), (b*a)]
    dup1               // Stack: [denominator, denominator, (b*a), (b*a)]
    iszero             // // Stack: [(denominator==0), denominator, (b*a), (b*a)]
    error jumpi
                       // Stack: [denominator, (b*a), (b*a)]
    
    swap1              // Stack: [(b*a), denominator, (b*a)]
    iszero             // Stack: [((b*a)==0), denominator, (b*a)]
    iszero             // Stack: [(((b*a)==0)==0), denominator, (b*a)]

    swap2              // Stack: [(b*a), denominator, (((b*a)==0)==0)]
    0x01               // Stack: [0x01, (b*a), denominator, (((b*a)==0)==0)]
    swap1              // Stack: [(b*a), 0x01, denominator, (((b*a)==0)==0)]
    sub                // Stack: [((b*a) - 0x01), denominator, (((b*a)==0)==0)]
    div                // Stack: [(((b*a) - 0x01) / denominator), (((b*a)==0)==0)]
    0x01               // Stack: [0x01, (((b*a) - 0x01) / denominator), (((b*a)==0)==0)]
    add                // Stack: [(0x01 + (((b*a) - 0x01) / denominator)), (((b*a)==0)==0)]
    mul                // Stack: [((0x01 + (((b*a) - 0x01) / denominator)) * (((b*a)==0)==0))]

    0x00               // Stack: [0x00, ((0x01 + (((b*a) - 0x01) / denominator)) * (((b*a)==0)==0))]
    mstore             // store in memory, memory[0x00:0x00+32] = ((0x01 + (((b*a) - 0x01) / denominator)) * (((b*a)==0)==0))

                       // Stack: []
    0x20 0x00 return   // return value at memory location 0x20, memory[0x20:0x20+0x00]

    error:
        0x00 0x00 revert

}



#define macro MAIN() = takes (0) returns (0) {
    0x00 calldataload 0xE0 shr
    // Get function signatures here: https://piyolab.github.io/playground/ethereum/getEncodedFunctionSignature/
    dup1 0xb67bee04 eq mulDivDown jumpi
    dup1 0x12bd6ac0 eq mulDivUp jumpi

    mulDivDown:
        MUL_DIV_DOWN()
    
    mulDivUp:
        MUL_DIV_UP()
}
